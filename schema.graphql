# V1 (relationships)

type Board {
  id: ID!
  name: String!
  members: [Member!]!
  lists: [List!]!
  team: Team
  boardBackground: BoardBackground
  isArchived: Boolean!
  labels: [Label!]!
  activityLogs: [ActivityLog!]!
}

type Member {
  id: ID!
  username: String!
  role: Role!
  notifications: [Notification!]!
}

enum Role {
  ADMIN
  MEMBER
  OBSERVER
}

type List {
  id: ID!
  name: String!
  position: Int!
  cards: [Card!]!
  isArchived: Boolean!
  color: String
}

type Card {
  id: ID!
  title: String!
  description: String
  dueDate: String
  members: [Member!]!
  attachments: [Attachment!]!
  checklists: [Checklist!]!
  comments: [Comment!]!
  labels: [Label!]!
  position: Int!
  isArchived: Boolean!
  dependencies: [Card!]!
  aging: Aging!
  votingPower: Int
}

type Attachment {
  id: ID!
  type: AttachmentType!
  url: String!
}

enum AttachmentType {
  FILE
  LINK
}

type Checklist {
  id: ID!
  title: String!
  items: [ChecklistItem!]!
}

type ChecklistItem {
  id: ID!
  title: String!
  isComplete: Boolean!
}

type Comment {
  id: ID!
  content: String!
  author: Member!
  mentions: [Member!]!
  createdAt: String!
}

type Label {
  id: ID!
  name: String!
  color: String!
}

type Team {
  id: ID!
  name: String!
  members: [Member!]!
}

type Notification {
  id: ID!
  content: String!
  createdAt: String!
}

type BoardBackground {
  id: ID!
  image: String!
  color: String
}

type ActivityLog {
  id: ID!
  content: String!
  createdAt: String!
}

# V2 (open-api)

type Organization {
  id: ID!
  name: String!
  displayName: String!
  description: String
  url: String
  logoUrl: String
  website: String
  email: String
  premiumFeatures: [String]
  powerUps: [String]
  products: [String]
  memberships: [Membership]
  boards: [Board]
  members: [Member]
}

type Membership {
  id: ID!
  member: Member
  memberType: String
  memberStatus: String
  dateJoined: String
}

type Board {
  id: ID!
  name: String
  url: String
}

type Member {
  id: ID!
  username: String
  fullName: String
  avatarUrl: String
}

type Query {
  organization(id: ID!): Organization
}

schema {
  query: Query
}
